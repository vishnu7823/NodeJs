const Contact = require("../models/DbModel");

exports.identifyContact = async (req, res) => {
    try {
        const { email, phoneNumber } = req.body;

        if (!email && !phoneNumber) {
            return res.status(400).json({ error: "Either email or phoneNumber is required" });
        }

        console.log("Incoming Request Data:", req.body); // ✅ Debugging log

        // Find existing contacts
        let existingContacts = await Contact.find({
            $or: [{ email }, { phoneNumber }],
        });

        if (existingContacts.length === 0) {
            // No existing contact, create a new primary contact
            const newContact = await Contact.create({
                email,
                phoneNumber,
                linkPrecedence: "primary",  // ✅ Ensure this field is set
            });

            console.log("New Primary Contact Created:", newContact); // ✅ Debugging log

            return res.json({
                primaryContactId: newContact._id,  // ✅ Use _id (auto-generated by MongoDB)
                emails: [email].filter(Boolean),
                phoneNumbers: [phoneNumber].filter(Boolean),
                secondaryContactIds: [],
            });
        }

        // Find the primary contact
        let primaryContact = existingContacts.find(c => c.linkPrecedence === "primary") || existingContacts[0];
        let secondaryContacts = existingContacts.filter(c => c.linkPrecedence === "secondary");

        // If the current email or phoneNumber is not found, create a secondary contact
        if (!existingContacts.some(c => c.email === email && c.phoneNumber === phoneNumber)) {
            const newSecondary = await Contact.create({
                email,
                phoneNumber,
                linkedId: primaryContact._id,
                linkPrecedence: "secondary", // ✅ Ensure secondary contacts are marked correctly
            });

            console.log("New Secondary Contact Created:", newSecondary); // ✅ Debugging log

            secondaryContacts.push(newSecondary);
        }

        return res.json({
            primaryContactId: primaryContact._id,  // ✅ Use _id (auto-generated by MongoDB)
            emails: [...new Set([primaryContact.email, ...secondaryContacts.map(c => c.email)].filter(Boolean))],
            phoneNumbers: [...new Set([primaryContact.phoneNumber, ...secondaryContacts.map(c => c.phoneNumber)].filter(Boolean))],
            secondaryContactIds: secondaryContacts.map(c => c._id),
        });
    } catch (error) {
        console.error("Error in identifyContact:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
};
